%%% COMPASS PARAMETERS %%%
clear all;
rise_time = 0.4;
settling_time = 18;

%% Compass UNDAMPED Relationship
natural_frequency = 1 / rise_time; % Note the factor of 2*pi
damping_ratio = 3 / (natural_frequency * settling_time);

if damping_ratio < 1
    disp("VALID Undamped Relationship to: " + damping_ratio)
    % Transfer function values
    compassTransferFunctionNumerator = natural_frequency ^ 2;
    compassTransferFunctionDenominator = [ 1 2*damping_ratio*natural_frequency natural_frequency^2 ];
else
    disp("INVALID Undamped Relationship to: " + damping_ratio)
    disp("RESET")
end

%% Frequency Analysis
secondOrderSystem = tf(compassTransferFunctionNumerator, compassTransferFunctionDenominator)
[magnitudeSecondOrder, phaseSecondOrder, frequenciesSecondOrder] = bode(secondOrderSystem);
% figure % Figure nly to check
% bode(secondOrderSystem);

% All db Magnitude points
i = 1;
iteratorMagnitudeDBSecondOrder(size(magnitudeSecondOrder(:,:))) = 0;
for val = magnitudeSecondOrder(:,:)
    iteratorMagnitudeDBSecondOrder(i) = -20* log10(1/val);
    i = i + 1;
end
rawMagnitudeDBSecondOrder = [transpose(frequenciesSecondOrder); iteratorMagnitudeDBSecondOrder];

% All Filtered dB Magnitude points
j = 1;
filteredMagnitudeDBSecondOrder(size(iteratorMagnitudeDBSecondOrder)) = 0;
for val = rawMagnitudeDBSecondOrder(1,:)
    if (val > -3) || (val < 3)
        filteredMagnitudeDBSecondOrder(j) = rawMagnitudeDBSecondOrder(1,j)
    end
    j = i + 1;
end


figure
plot(frequenciesSecondOrder, iteratorMagnitudeDBSecondOrder);
hold on
yline(-3);
yline(3);
set(gca, 'XScale', 'log')
hold off

figure
plot(frequenciesSecondOrder, phaseSecondOrder(:,:));
set(gca, 'XScale', 'log')



